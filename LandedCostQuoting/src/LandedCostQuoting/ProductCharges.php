<?php
/**
 * ProductCharges
 *
 * PHP version 5
 *
 * @category Class
 * @package  UPS\LandedCostQuoting
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Landed Cost
 *
 * Landed Cost provides an all-inclusive cost estimate of international shipments.
 *
 * OpenAPI spec version: 1.0.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.45
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace UPS\LandedCostQuoting\LandedCostQuoting;

use \ArrayAccess;
use \UPS\LandedCostQuoting\ObjectSerializer;

/**
 * ProductCharges Class Doc Comment
 *
 * @category Class
 * @description Container for the Product charge
 * @package  UPS\LandedCostQuoting
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class ProductCharges implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'Product_Charges';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'duties' => 'string',
        'taxes_and_fees' => 'string',
        'vat' => 'string',
        'cost_of_goods' => 'string',
        'sub_total' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'duties' => null,
        'taxes_and_fees' => null,
        'vat' => null,
        'cost_of_goods' => null,
        'sub_total' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'duties' => 'Duties',
        'taxes_and_fees' => 'TaxesAndFees',
        'vat' => 'VAT',
        'cost_of_goods' => 'CostOfGoods',
        'sub_total' => 'SubTotal'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'duties' => 'setDuties',
        'taxes_and_fees' => 'setTaxesAndFees',
        'vat' => 'setVat',
        'cost_of_goods' => 'setCostOfGoods',
        'sub_total' => 'setSubTotal'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'duties' => 'getDuties',
        'taxes_and_fees' => 'getTaxesAndFees',
        'vat' => 'getVat',
        'cost_of_goods' => 'getCostOfGoods',
        'sub_total' => 'getSubTotal'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }



    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['duties'] = isset($data['duties']) ? $data['duties'] : null;
        $this->container['taxes_and_fees'] = isset($data['taxes_and_fees']) ? $data['taxes_and_fees'] : null;
        $this->container['vat'] = isset($data['vat']) ? $data['vat'] : null;
        $this->container['cost_of_goods'] = isset($data['cost_of_goods']) ? $data['cost_of_goods'] : null;
        $this->container['sub_total'] = isset($data['sub_total']) ? $data['sub_total'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['cost_of_goods'] === null) {
            $invalidProperties[] = "'cost_of_goods' can't be null";
        }
        if ($this->container['sub_total'] === null) {
            $invalidProperties[] = "'sub_total' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets duties
     *
     * @return string
     */
    public function getDuties()
    {
        return $this->container['duties'];
    }

    /**
     * Sets duties
     *
     * @param string $duties Product duties. Valid characters are 0-9, Decimal Point (\".\"), and Thousand separator (\",\"). Limit to 4 digits after the decimal.
     *
     * @return $this
     */
    public function setDuties($duties)
    {
        $this->container['duties'] = $duties;

        return $this;
    }

    /**
     * Gets taxes_and_fees
     *
     * @return string
     */
    public function getTaxesAndFees()
    {
        return $this->container['taxes_and_fees'];
    }

    /**
     * Sets taxes_and_fees
     *
     * @param string $taxes_and_fees Product taxes and fees.  Valid characters are 0-9, Decimal Point (\".\"), and Thousand separator (\",\").  Limit to 4 digits after the decimal.
     *
     * @return $this
     */
    public function setTaxesAndFees($taxes_and_fees)
    {
        $this->container['taxes_and_fees'] = $taxes_and_fees;

        return $this;
    }

    /**
     * Gets vat
     *
     * @return string
     */
    public function getVat()
    {
        return $this->container['vat'];
    }

    /**
     * Sets vat
     *
     * @param string $vat Product VAT.  Valid characters are 0-9, Decimal Point (\".\"), and Thousand separator (\",\").  Limit to 4 digits after the decimal.
     *
     * @return $this
     */
    public function setVat($vat)
    {
        $this->container['vat'] = $vat;

        return $this;
    }

    /**
     * Gets cost_of_goods
     *
     * @return string
     */
    public function getCostOfGoods()
    {
        return $this->container['cost_of_goods'];
    }

    /**
     * Sets cost_of_goods
     *
     * @param string $cost_of_goods Product price unit price * quantity.  Valid characters are 0-9, Decimal Point (\".\"), and Thousand separator (\",\").  Limit to 4 digits after the decimal.
     *
     * @return $this
     */
    public function setCostOfGoods($cost_of_goods)
    {
        $this->container['cost_of_goods'] = $cost_of_goods;

        return $this;
    }

    /**
     * Gets sub_total
     *
     * @return string
     */
    public function getSubTotal()
    {
        return $this->container['sub_total'];
    }

    /**
     * Sets sub_total
     *
     * @param string $sub_total The product total cost ...sum of Duties, TaxesAndFees, VAT and CostOfGoods.  Valid characters are 0-9, Decimal Point (\".\"), and Thousand separator (\",\").  Limit to 4 characters after the decimal point.
     *
     * @return $this
     */
    public function setSubTotal($sub_total)
    {
        $this->container['sub_total'] = $sub_total;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
