<?php
/**
 * LandedCostRequest
 *
 * PHP version 5
 *
 * @category Class
 * @package  UPS\LandedCostQuoting
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Landed Cost
 *
 * Landed Cost provides an all-inclusive cost estimate of international shipments.
 *
 * OpenAPI spec version: 1.0.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.45
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace UPS\LandedCostQuoting\LandedCostQuoting;

use \ArrayAccess;
use \UPS\LandedCostQuoting\ObjectSerializer;

/**
 * LandedCostRequest Class Doc Comment
 *
 * @category Class
 * @description The root element for the Landed Cost document.
 * @package  UPS\LandedCostQuoting
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class LandedCostRequest implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'LandedCostRequest';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'request' => '\UPS\LandedCostQuoting\LandedCostQuoting\LandedCostRequestRequest',
        'query_request' => '\UPS\LandedCostQuoting\LandedCostQuoting\LandedCostRequestQueryRequest',
        'estimate_request' => '\UPS\LandedCostQuoting\LandedCostQuoting\LandedCostRequestEstimateRequest',
        'shipping_history_user_key' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'request' => null,
        'query_request' => null,
        'estimate_request' => null,
        'shipping_history_user_key' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'request' => 'Request',
        'query_request' => 'QueryRequest',
        'estimate_request' => 'EstimateRequest',
        'shipping_history_user_key' => 'ShippingHistoryUserKey'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'request' => 'setRequest',
        'query_request' => 'setQueryRequest',
        'estimate_request' => 'setEstimateRequest',
        'shipping_history_user_key' => 'setShippingHistoryUserKey'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'request' => 'getRequest',
        'query_request' => 'getQueryRequest',
        'estimate_request' => 'getEstimateRequest',
        'shipping_history_user_key' => 'getShippingHistoryUserKey'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }



    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['request'] = isset($data['request']) ? $data['request'] : null;
        $this->container['query_request'] = isset($data['query_request']) ? $data['query_request'] : null;
        $this->container['estimate_request'] = isset($data['estimate_request']) ? $data['estimate_request'] : null;
        $this->container['shipping_history_user_key'] = isset($data['shipping_history_user_key']) ? $data['shipping_history_user_key'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['request'] === null) {
            $invalidProperties[] = "'request' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets request
     *
     * @return \UPS\LandedCostQuoting\LandedCostQuoting\LandedCostRequestRequest
     */
    public function getRequest()
    {
        return $this->container['request'];
    }

    /**
     * Sets request
     *
     * @param \UPS\LandedCostQuoting\LandedCostQuoting\LandedCostRequestRequest $request request
     *
     * @return $this
     */
    public function setRequest($request)
    {
        $this->container['request'] = $request;

        return $this;
    }

    /**
     * Gets query_request
     *
     * @return \UPS\LandedCostQuoting\LandedCostQuoting\LandedCostRequestQueryRequest
     */
    public function getQueryRequest()
    {
        return $this->container['query_request'];
    }

    /**
     * Sets query_request
     *
     * @param \UPS\LandedCostQuoting\LandedCostQuoting\LandedCostRequestQueryRequest $query_request query_request
     *
     * @return $this
     */
    public function setQueryRequest($query_request)
    {
        $this->container['query_request'] = $query_request;

        return $this;
    }

    /**
     * Gets estimate_request
     *
     * @return \UPS\LandedCostQuoting\LandedCostQuoting\LandedCostRequestEstimateRequest
     */
    public function getEstimateRequest()
    {
        return $this->container['estimate_request'];
    }

    /**
     * Sets estimate_request
     *
     * @param \UPS\LandedCostQuoting\LandedCostQuoting\LandedCostRequestEstimateRequest $estimate_request estimate_request
     *
     * @return $this
     */
    public function setEstimateRequest($estimate_request)
    {
        $this->container['estimate_request'] = $estimate_request;

        return $this;
    }

    /**
     * Gets shipping_history_user_key
     *
     * @return string
     */
    public function getShippingHistoryUserKey()
    {
        return $this->container['shipping_history_user_key'];
    }

    /**
     * Sets shipping_history_user_key
     *
     * @param string $shipping_history_user_key Unique key to tag shipments in shipping history. It could be MyUPS registration Number or any unique identifier.
     *
     * @return $this
     */
    public function setShippingHistoryUserKey($shipping_history_user_key)
    {
        $this->container['shipping_history_user_key'] = $shipping_history_user_key;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
