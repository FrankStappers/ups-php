<?php
/**
 * ProductTariffInfo
 *
 * PHP version 5
 *
 * @category Class
 * @package  UPS\LandedCostQuoting
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Landed Cost
 *
 * Landed Cost provides an all-inclusive cost estimate of international shipments.
 *
 * OpenAPI spec version: 1.0.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.45
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace UPS\LandedCostQuoting\LandedCostQuoting;

use \ArrayAccess;
use \UPS\LandedCostQuoting\ObjectSerializer;

/**
 * ProductTariffInfo Class Doc Comment
 *
 * @category Class
 * @description A container element which contains the Tariff Code Information.
 * @package  UPS\LandedCostQuoting
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class ProductTariffInfo implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'Product_TariffInfo';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'tariff_code' => 'string',
        'detail_id' => 'string',
        'secondary_tariff_code' => 'string',
        'secondary_detail_id' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'tariff_code' => null,
        'detail_id' => null,
        'secondary_tariff_code' => null,
        'secondary_detail_id' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'tariff_code' => 'TariffCode',
        'detail_id' => 'DetailID',
        'secondary_tariff_code' => 'SecondaryTariffCode',
        'secondary_detail_id' => 'SecondaryDetailID'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'tariff_code' => 'setTariffCode',
        'detail_id' => 'setDetailId',
        'secondary_tariff_code' => 'setSecondaryTariffCode',
        'secondary_detail_id' => 'setSecondaryDetailId'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'tariff_code' => 'getTariffCode',
        'detail_id' => 'getDetailId',
        'secondary_tariff_code' => 'getSecondaryTariffCode',
        'secondary_detail_id' => 'getSecondaryDetailId'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }



    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['tariff_code'] = isset($data['tariff_code']) ? $data['tariff_code'] : null;
        $this->container['detail_id'] = isset($data['detail_id']) ? $data['detail_id'] : null;
        $this->container['secondary_tariff_code'] = isset($data['secondary_tariff_code']) ? $data['secondary_tariff_code'] : null;
        $this->container['secondary_detail_id'] = isset($data['secondary_detail_id']) ? $data['secondary_detail_id'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['tariff_code'] === null) {
            $invalidProperties[] = "'tariff_code' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets tariff_code
     *
     * @return string
     */
    public function getTariffCode()
    {
        return $this->container['tariff_code'];
    }

    /**
     * Sets tariff_code
     *
     * @param string $tariff_code Tariff Code of the product.  Valid characters are 0-9 and Decimal Point (\".\").  Only 6 numeric fields will be considered during validation for the minimum length of the Tariff Code.
     *
     * @return $this
     */
    public function setTariffCode($tariff_code)
    {
        $this->container['tariff_code'] = $tariff_code;

        return $this;
    }

    /**
     * Gets detail_id
     *
     * @return string
     */
    public function getDetailId()
    {
        return $this->container['detail_id'];
    }

    /**
     * Sets detail_id
     *
     * @param string $detail_id Additional information on Tariff Code of the product.  Valid characters are 0-9 and Decimal point (�.�).  The DetailID is used by TradeAbility to help refine results and should not be reported on official customs documents as part of the Tariff Code.
     *
     * @return $this
     */
    public function setDetailId($detail_id)
    {
        $this->container['detail_id'] = $detail_id;

        return $this;
    }

    /**
     * Gets secondary_tariff_code
     *
     * @return string
     */
    public function getSecondaryTariffCode()
    {
        return $this->container['secondary_tariff_code'];
    }

    /**
     * Sets secondary_tariff_code
     *
     * @param string $secondary_tariff_code Secondary Tariff Code of the product.  Valid characters are 0-9 and Decimal point (�.�).  Only 6 numeric fields will be considered during validation for the minimum length of the Secondary Tariff Code.
     *
     * @return $this
     */
    public function setSecondaryTariffCode($secondary_tariff_code)
    {
        $this->container['secondary_tariff_code'] = $secondary_tariff_code;

        return $this;
    }

    /**
     * Gets secondary_detail_id
     *
     * @return string
     */
    public function getSecondaryDetailId()
    {
        return $this->container['secondary_detail_id'];
    }

    /**
     * Sets secondary_detail_id
     *
     * @param string $secondary_detail_id Additional information on Secondary Tariff Code of the product.  Valid characters are 0-9 and Decimal Point (�.�).  The SecondaryDetailID is used by TradeAbility to help refine results and should not be reported on official customs documents as part of the Tariff Code.
     *
     * @return $this
     */
    public function setSecondaryDetailId($secondary_detail_id)
    {
        $this->container['secondary_detail_id'] = $secondary_detail_id;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
