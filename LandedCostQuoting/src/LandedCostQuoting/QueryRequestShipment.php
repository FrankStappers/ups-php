<?php
/**
 * QueryRequestShipment
 *
 * PHP version 5
 *
 * @category Class
 * @package  UPS\LandedCostQuoting
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Landed Cost
 *
 * Landed Cost provides an all-inclusive cost estimate of international shipments.
 *
 * OpenAPI spec version: 1.0.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.45
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace UPS\LandedCostQuoting\LandedCostQuoting;

use \ArrayAccess;
use \UPS\LandedCostQuoting\ObjectSerializer;

/**
 * QueryRequestShipment Class Doc Comment
 *
 * @category Class
 * @description Container for the shipment data
 * @package  UPS\LandedCostQuoting
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class QueryRequestShipment implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'QueryRequest_Shipment';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'origin_country_code' => 'string',
        'origin_state_province_code' => 'string',
        'destination_country_code' => 'string',
        'destination_state_province_code' => 'string',
        'transportation_mode' => 'string',
        'freight_charges' => '\UPS\LandedCostQuoting\LandedCostQuoting\ShipmentFreightCharges',
        'additional_insurance' => '\UPS\LandedCostQuoting\LandedCostQuoting\ShipmentAdditionalInsurance',
        'tariff_code_alert' => 'string',
        'product' => '\UPS\LandedCostQuoting\LandedCostQuoting\ShipmentProduct[]',
        'result_currency_code' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'origin_country_code' => null,
        'origin_state_province_code' => null,
        'destination_country_code' => null,
        'destination_state_province_code' => null,
        'transportation_mode' => null,
        'freight_charges' => null,
        'additional_insurance' => null,
        'tariff_code_alert' => null,
        'product' => null,
        'result_currency_code' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'origin_country_code' => 'OriginCountryCode',
        'origin_state_province_code' => 'OriginStateProvinceCode',
        'destination_country_code' => 'DestinationCountryCode',
        'destination_state_province_code' => 'DestinationStateProvinceCode',
        'transportation_mode' => 'TransportationMode',
        'freight_charges' => 'FreightCharges',
        'additional_insurance' => 'AdditionalInsurance',
        'tariff_code_alert' => 'TariffCodeAlert',
        'product' => 'Product',
        'result_currency_code' => 'ResultCurrencyCode'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'origin_country_code' => 'setOriginCountryCode',
        'origin_state_province_code' => 'setOriginStateProvinceCode',
        'destination_country_code' => 'setDestinationCountryCode',
        'destination_state_province_code' => 'setDestinationStateProvinceCode',
        'transportation_mode' => 'setTransportationMode',
        'freight_charges' => 'setFreightCharges',
        'additional_insurance' => 'setAdditionalInsurance',
        'tariff_code_alert' => 'setTariffCodeAlert',
        'product' => 'setProduct',
        'result_currency_code' => 'setResultCurrencyCode'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'origin_country_code' => 'getOriginCountryCode',
        'origin_state_province_code' => 'getOriginStateProvinceCode',
        'destination_country_code' => 'getDestinationCountryCode',
        'destination_state_province_code' => 'getDestinationStateProvinceCode',
        'transportation_mode' => 'getTransportationMode',
        'freight_charges' => 'getFreightCharges',
        'additional_insurance' => 'getAdditionalInsurance',
        'tariff_code_alert' => 'getTariffCodeAlert',
        'product' => 'getProduct',
        'result_currency_code' => 'getResultCurrencyCode'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }



    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['origin_country_code'] = isset($data['origin_country_code']) ? $data['origin_country_code'] : null;
        $this->container['origin_state_province_code'] = isset($data['origin_state_province_code']) ? $data['origin_state_province_code'] : null;
        $this->container['destination_country_code'] = isset($data['destination_country_code']) ? $data['destination_country_code'] : null;
        $this->container['destination_state_province_code'] = isset($data['destination_state_province_code']) ? $data['destination_state_province_code'] : null;
        $this->container['transportation_mode'] = isset($data['transportation_mode']) ? $data['transportation_mode'] : null;
        $this->container['freight_charges'] = isset($data['freight_charges']) ? $data['freight_charges'] : null;
        $this->container['additional_insurance'] = isset($data['additional_insurance']) ? $data['additional_insurance'] : null;
        $this->container['tariff_code_alert'] = isset($data['tariff_code_alert']) ? $data['tariff_code_alert'] : null;
        $this->container['product'] = isset($data['product']) ? $data['product'] : null;
        $this->container['result_currency_code'] = isset($data['result_currency_code']) ? $data['result_currency_code'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['origin_country_code'] === null) {
            $invalidProperties[] = "'origin_country_code' can't be null";
        }
        if ($this->container['destination_country_code'] === null) {
            $invalidProperties[] = "'destination_country_code' can't be null";
        }
        if ($this->container['product'] === null) {
            $invalidProperties[] = "'product' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets origin_country_code
     *
     * @return string
     */
    public function getOriginCountryCode()
    {
        return $this->container['origin_country_code'];
    }

    /**
     * Sets origin_country_code
     *
     * @param string $origin_country_code Two-character ISO country or territory code where the items shipped from. Cannot be the same as destination country or territory code.
     *
     * @return $this
     */
    public function setOriginCountryCode($origin_country_code)
    {
        $this->container['origin_country_code'] = $origin_country_code;

        return $this;
    }

    /**
     * Gets origin_state_province_code
     *
     * @return string
     */
    public function getOriginStateProvinceCode()
    {
        return $this->container['origin_state_province_code'];
    }

    /**
     * Sets origin_state_province_code
     *
     * @param string $origin_state_province_code State/Province Code of origin country. Required if the    origin country is Canada CA or Brazil BR.
     *
     * @return $this
     */
    public function setOriginStateProvinceCode($origin_state_province_code)
    {
        $this->container['origin_state_province_code'] = $origin_state_province_code;

        return $this;
    }

    /**
     * Gets destination_country_code
     *
     * @return string
     */
    public function getDestinationCountryCode()
    {
        return $this->container['destination_country_code'];
    }

    /**
     * Sets destination_country_code
     *
     * @param string $destination_country_code Two-character ISO code ISO country or territory code where the items    shipped to. Cannot be the same as origin country or territory code.
     *
     * @return $this
     */
    public function setDestinationCountryCode($destination_country_code)
    {
        $this->container['destination_country_code'] = $destination_country_code;

        return $this;
    }

    /**
     * Gets destination_state_province_code
     *
     * @return string
     */
    public function getDestinationStateProvinceCode()
    {
        return $this->container['destination_state_province_code'];
    }

    /**
     * Sets destination_state_province_code
     *
     * @param string $destination_state_province_code State/Province Code of destination country or territory. Required if    the destination country is Canada CA or Brazil BR.
     *
     * @return $this
     */
    public function setDestinationStateProvinceCode($destination_state_province_code)
    {
        $this->container['destination_state_province_code'] = $destination_state_province_code;

        return $this;
    }

    /**
     * Gets transportation_mode
     *
     * @return string
     */
    public function getTransportationMode()
    {
        return $this->container['transportation_mode'];
    }

    /**
     * Sets transportation_mode
     *
     * @param string $transportation_mode Valid values: 1 - Air 2 - Ground 3 - Rail 4 -?? Ocean If    not specified, default to Air.
     *
     * @return $this
     */
    public function setTransportationMode($transportation_mode)
    {
        $this->container['transportation_mode'] = $transportation_mode;

        return $this;
    }

    /**
     * Gets freight_charges
     *
     * @return \UPS\LandedCostQuoting\LandedCostQuoting\ShipmentFreightCharges
     */
    public function getFreightCharges()
    {
        return $this->container['freight_charges'];
    }

    /**
     * Sets freight_charges
     *
     * @param \UPS\LandedCostQuoting\LandedCostQuoting\ShipmentFreightCharges $freight_charges freight_charges
     *
     * @return $this
     */
    public function setFreightCharges($freight_charges)
    {
        $this->container['freight_charges'] = $freight_charges;

        return $this;
    }

    /**
     * Gets additional_insurance
     *
     * @return \UPS\LandedCostQuoting\LandedCostQuoting\ShipmentAdditionalInsurance
     */
    public function getAdditionalInsurance()
    {
        return $this->container['additional_insurance'];
    }

    /**
     * Sets additional_insurance
     *
     * @param \UPS\LandedCostQuoting\LandedCostQuoting\ShipmentAdditionalInsurance $additional_insurance additional_insurance
     *
     * @return $this
     */
    public function setAdditionalInsurance($additional_insurance)
    {
        $this->container['additional_insurance'] = $additional_insurance;

        return $this;
    }

    /**
     * Gets tariff_code_alert
     *
     * @return string
     */
    public function getTariffCodeAlert()
    {
        return $this->container['tariff_code_alert'];
    }

    /**
     * Sets tariff_code_alert
     *
     * @param string $tariff_code_alert Contains the indicator for global Tariff Code Alerts. 0 = true, send tariff code alerts for all tariff codes in the request. 1 = false, do not send tariff code alerts for any of the tariff codes in the request. This indicator setting supersedes the TariffCodeAlert settings in individual Product Type elements. Note: by setting this value to 1 false, you will not receive Tariff Code Alerts for the products in the request.  Note: Invalid values will result in the value being set to true.
     *
     * @return $this
     */
    public function setTariffCodeAlert($tariff_code_alert)
    {
        $this->container['tariff_code_alert'] = $tariff_code_alert;

        return $this;
    }

    /**
     * Gets product
     *
     * @return \UPS\LandedCostQuoting\LandedCostQuoting\ShipmentProduct[]
     */
    public function getProduct()
    {
        return $this->container['product'];
    }

    /**
     * Sets product
     *
     * @param \UPS\LandedCostQuoting\LandedCostQuoting\ShipmentProduct[] $product product
     *
     * @return $this
     */
    public function setProduct($product)
    {
        $this->container['product'] = $product;

        return $this;
    }

    /**
     * Gets result_currency_code
     *
     * @return string
     */
    public function getResultCurrencyCode()
    {
        return $this->container['result_currency_code'];
    }

    /**
     * Sets result_currency_code
     *
     * @param string $result_currency_code Currency code for the Landed Cost quote. Must be    three-character ISO code.
     *
     * @return $this
     */
    public function setResultCurrencyCode($result_currency_code)
    {
        $this->container['result_currency_code'] = $result_currency_code;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
