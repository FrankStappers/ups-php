<?php
/**
 * FreightRateRequestShipmentServiceOptions
 *
 * PHP version 5
 *
 * @category Class
 * @package  UPS\FreightRating
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Freight Rate
 *
 * The Rating Ground Freight API may only be used by brokers or resellers of transportation services with a current and active UPGF Master Transportation Agreement.
 *
 * OpenAPI spec version: 1.0.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.45
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace UPS\FreightRating\FreightRating;

use \ArrayAccess;
use \UPS\FreightRating\ObjectSerializer;

/**
 * FreightRateRequestShipmentServiceOptions Class Doc Comment
 *
 * @category Class
 * @description ShipmentServiceOptions Container.
 * @package  UPS\FreightRating
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class FreightRateRequestShipmentServiceOptions implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'FreightRateRequest_ShipmentServiceOptions';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'pickup_options' => '\UPS\FreightRating\FreightRating\ShipmentServiceOptionsPickupOptions',
        'delivery_options' => '\UPS\FreightRating\FreightRating\ShipmentServiceOptionsDeliveryOptions',
        'over_seas_leg' => '\UPS\FreightRating\FreightRating\ShipmentServiceOptionsOverSeasLeg',
        'cod' => '\UPS\FreightRating\FreightRating\ShipmentServiceOptionsCOD',
        'dangerous_goods' => '\UPS\FreightRating\FreightRating\ShipmentServiceOptionsDangerousGoods',
        'sorting_and_segregating' => '\UPS\FreightRating\FreightRating\ShipmentServiceOptionsSortingAndSegregating',
        'excess_declared_value' => '\UPS\FreightRating\FreightRating\ShipmentServiceOptionsExcessDeclaredValue',
        'handling_charge' => '\UPS\FreightRating\FreightRating\ShipmentServiceOptionsHandlingCharge',
        'freezable_protection_indicator' => 'string',
        'extreme_length_indicator' => 'string',
        'linear_feet' => 'string',
        'adjusted_height' => '\UPS\FreightRating\FreightRating\ShipmentServiceOptionsAdjustedHeight'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'pickup_options' => null,
        'delivery_options' => null,
        'over_seas_leg' => null,
        'cod' => null,
        'dangerous_goods' => null,
        'sorting_and_segregating' => null,
        'excess_declared_value' => null,
        'handling_charge' => null,
        'freezable_protection_indicator' => null,
        'extreme_length_indicator' => null,
        'linear_feet' => null,
        'adjusted_height' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'pickup_options' => 'PickupOptions',
        'delivery_options' => 'DeliveryOptions',
        'over_seas_leg' => 'OverSeasLeg',
        'cod' => 'COD',
        'dangerous_goods' => 'DangerousGoods',
        'sorting_and_segregating' => 'SortingAndSegregating',
        'excess_declared_value' => 'ExcessDeclaredValue',
        'handling_charge' => 'HandlingCharge',
        'freezable_protection_indicator' => 'FreezableProtectionIndicator',
        'extreme_length_indicator' => 'ExtremeLengthIndicator',
        'linear_feet' => 'LinearFeet',
        'adjusted_height' => 'AdjustedHeight'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'pickup_options' => 'setPickupOptions',
        'delivery_options' => 'setDeliveryOptions',
        'over_seas_leg' => 'setOverSeasLeg',
        'cod' => 'setCod',
        'dangerous_goods' => 'setDangerousGoods',
        'sorting_and_segregating' => 'setSortingAndSegregating',
        'excess_declared_value' => 'setExcessDeclaredValue',
        'handling_charge' => 'setHandlingCharge',
        'freezable_protection_indicator' => 'setFreezableProtectionIndicator',
        'extreme_length_indicator' => 'setExtremeLengthIndicator',
        'linear_feet' => 'setLinearFeet',
        'adjusted_height' => 'setAdjustedHeight'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'pickup_options' => 'getPickupOptions',
        'delivery_options' => 'getDeliveryOptions',
        'over_seas_leg' => 'getOverSeasLeg',
        'cod' => 'getCod',
        'dangerous_goods' => 'getDangerousGoods',
        'sorting_and_segregating' => 'getSortingAndSegregating',
        'excess_declared_value' => 'getExcessDeclaredValue',
        'handling_charge' => 'getHandlingCharge',
        'freezable_protection_indicator' => 'getFreezableProtectionIndicator',
        'extreme_length_indicator' => 'getExtremeLengthIndicator',
        'linear_feet' => 'getLinearFeet',
        'adjusted_height' => 'getAdjustedHeight'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }



    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['pickup_options'] = isset($data['pickup_options']) ? $data['pickup_options'] : null;
        $this->container['delivery_options'] = isset($data['delivery_options']) ? $data['delivery_options'] : null;
        $this->container['over_seas_leg'] = isset($data['over_seas_leg']) ? $data['over_seas_leg'] : null;
        $this->container['cod'] = isset($data['cod']) ? $data['cod'] : null;
        $this->container['dangerous_goods'] = isset($data['dangerous_goods']) ? $data['dangerous_goods'] : null;
        $this->container['sorting_and_segregating'] = isset($data['sorting_and_segregating']) ? $data['sorting_and_segregating'] : null;
        $this->container['excess_declared_value'] = isset($data['excess_declared_value']) ? $data['excess_declared_value'] : null;
        $this->container['handling_charge'] = isset($data['handling_charge']) ? $data['handling_charge'] : null;
        $this->container['freezable_protection_indicator'] = isset($data['freezable_protection_indicator']) ? $data['freezable_protection_indicator'] : null;
        $this->container['extreme_length_indicator'] = isset($data['extreme_length_indicator']) ? $data['extreme_length_indicator'] : null;
        $this->container['linear_feet'] = isset($data['linear_feet']) ? $data['linear_feet'] : null;
        $this->container['adjusted_height'] = isset($data['adjusted_height']) ? $data['adjusted_height'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets pickup_options
     *
     * @return \UPS\FreightRating\FreightRating\ShipmentServiceOptionsPickupOptions
     */
    public function getPickupOptions()
    {
        return $this->container['pickup_options'];
    }

    /**
     * Sets pickup_options
     *
     * @param \UPS\FreightRating\FreightRating\ShipmentServiceOptionsPickupOptions $pickup_options pickup_options
     *
     * @return $this
     */
    public function setPickupOptions($pickup_options)
    {
        $this->container['pickup_options'] = $pickup_options;

        return $this;
    }

    /**
     * Gets delivery_options
     *
     * @return \UPS\FreightRating\FreightRating\ShipmentServiceOptionsDeliveryOptions
     */
    public function getDeliveryOptions()
    {
        return $this->container['delivery_options'];
    }

    /**
     * Sets delivery_options
     *
     * @param \UPS\FreightRating\FreightRating\ShipmentServiceOptionsDeliveryOptions $delivery_options delivery_options
     *
     * @return $this
     */
    public function setDeliveryOptions($delivery_options)
    {
        $this->container['delivery_options'] = $delivery_options;

        return $this;
    }

    /**
     * Gets over_seas_leg
     *
     * @return \UPS\FreightRating\FreightRating\ShipmentServiceOptionsOverSeasLeg
     */
    public function getOverSeasLeg()
    {
        return $this->container['over_seas_leg'];
    }

    /**
     * Sets over_seas_leg
     *
     * @param \UPS\FreightRating\FreightRating\ShipmentServiceOptionsOverSeasLeg $over_seas_leg over_seas_leg
     *
     * @return $this
     */
    public function setOverSeasLeg($over_seas_leg)
    {
        $this->container['over_seas_leg'] = $over_seas_leg;

        return $this;
    }

    /**
     * Gets cod
     *
     * @return \UPS\FreightRating\FreightRating\ShipmentServiceOptionsCOD
     */
    public function getCod()
    {
        return $this->container['cod'];
    }

    /**
     * Sets cod
     *
     * @param \UPS\FreightRating\FreightRating\ShipmentServiceOptionsCOD $cod cod
     *
     * @return $this
     */
    public function setCod($cod)
    {
        $this->container['cod'] = $cod;

        return $this;
    }

    /**
     * Gets dangerous_goods
     *
     * @return \UPS\FreightRating\FreightRating\ShipmentServiceOptionsDangerousGoods
     */
    public function getDangerousGoods()
    {
        return $this->container['dangerous_goods'];
    }

    /**
     * Sets dangerous_goods
     *
     * @param \UPS\FreightRating\FreightRating\ShipmentServiceOptionsDangerousGoods $dangerous_goods dangerous_goods
     *
     * @return $this
     */
    public function setDangerousGoods($dangerous_goods)
    {
        $this->container['dangerous_goods'] = $dangerous_goods;

        return $this;
    }

    /**
     * Gets sorting_and_segregating
     *
     * @return \UPS\FreightRating\FreightRating\ShipmentServiceOptionsSortingAndSegregating
     */
    public function getSortingAndSegregating()
    {
        return $this->container['sorting_and_segregating'];
    }

    /**
     * Sets sorting_and_segregating
     *
     * @param \UPS\FreightRating\FreightRating\ShipmentServiceOptionsSortingAndSegregating $sorting_and_segregating sorting_and_segregating
     *
     * @return $this
     */
    public function setSortingAndSegregating($sorting_and_segregating)
    {
        $this->container['sorting_and_segregating'] = $sorting_and_segregating;

        return $this;
    }

    /**
     * Gets excess_declared_value
     *
     * @return \UPS\FreightRating\FreightRating\ShipmentServiceOptionsExcessDeclaredValue
     */
    public function getExcessDeclaredValue()
    {
        return $this->container['excess_declared_value'];
    }

    /**
     * Sets excess_declared_value
     *
     * @param \UPS\FreightRating\FreightRating\ShipmentServiceOptionsExcessDeclaredValue $excess_declared_value excess_declared_value
     *
     * @return $this
     */
    public function setExcessDeclaredValue($excess_declared_value)
    {
        $this->container['excess_declared_value'] = $excess_declared_value;

        return $this;
    }

    /**
     * Gets handling_charge
     *
     * @return \UPS\FreightRating\FreightRating\ShipmentServiceOptionsHandlingCharge
     */
    public function getHandlingCharge()
    {
        return $this->container['handling_charge'];
    }

    /**
     * Sets handling_charge
     *
     * @param \UPS\FreightRating\FreightRating\ShipmentServiceOptionsHandlingCharge $handling_charge handling_charge
     *
     * @return $this
     */
    public function setHandlingCharge($handling_charge)
    {
        $this->container['handling_charge'] = $handling_charge;

        return $this;
    }

    /**
     * Gets freezable_protection_indicator
     *
     * @return string
     */
    public function getFreezableProtectionIndicator()
    {
        return $this->container['freezable_protection_indicator'];
    }

    /**
     * Sets freezable_protection_indicator
     *
     * @param string $freezable_protection_indicator The presence of the tag FreezableProtectionIndicator indicates that the customs clearance is required.
     *
     * @return $this
     */
    public function setFreezableProtectionIndicator($freezable_protection_indicator)
    {
        $this->container['freezable_protection_indicator'] = $freezable_protection_indicator;

        return $this;
    }

    /**
     * Gets extreme_length_indicator
     *
     * @return string
     */
    public function getExtremeLengthIndicator()
    {
        return $this->container['extreme_length_indicator'];
    }

    /**
     * Sets extreme_length_indicator
     *
     * @param string $extreme_length_indicator The presence of the tag ExtremeLengthIndicator indicates that the customs clearance is required. It is recommended to provide 'LinearFeet' if this indicator is sent.
     *
     * @return $this
     */
    public function setExtremeLengthIndicator($extreme_length_indicator)
    {
        $this->container['extreme_length_indicator'] = $extreme_length_indicator;

        return $this;
    }

    /**
     * Gets linear_feet
     *
     * @return string
     */
    public function getLinearFeet()
    {
        return $this->container['linear_feet'];
    }

    /**
     * Sets linear_feet
     *
     * @param string $linear_feet Dimensional length of the article(s), in 'feet'. Numeric value greater than �0� (Zero) should be given in LinearFeet. If Proper LinearFeet is not provided, accurate charge for extreme length articles might not be returned. If linear feet �0� (Zero) or any non-numeric/invalid character is sent, accurate charge for extreme length articles might not be returned. Ignored if ExtremeLengthIndicator is not present.
     *
     * @return $this
     */
    public function setLinearFeet($linear_feet)
    {
        $this->container['linear_feet'] = $linear_feet;

        return $this;
    }

    /**
     * Gets adjusted_height
     *
     * @return \UPS\FreightRating\FreightRating\ShipmentServiceOptionsAdjustedHeight
     */
    public function getAdjustedHeight()
    {
        return $this->container['adjusted_height'];
    }

    /**
     * Sets adjusted_height
     *
     * @param \UPS\FreightRating\FreightRating\ShipmentServiceOptionsAdjustedHeight $adjusted_height adjusted_height
     *
     * @return $this
     */
    public function setAdjustedHeight($adjusted_height)
    {
        $this->container['adjusted_height'] = $adjusted_height;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
